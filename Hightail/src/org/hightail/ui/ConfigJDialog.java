/*
 * ConfigJDialog.java
 *
 * Created on 2011-02-18, 17:49:44
 */

package org.hightail.ui;

import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.hightail.Config;

public class ConfigJDialog extends javax.swing.JDialog {
    protected final JFileChooser workingDirectoryChooser, templateFileChooser, editorCommandFileChooser, compilerCommandFileChooser;

    /** Creates new form ConfigJDialog */
    public ConfigJDialog(JFrame parent) {
        super(parent, true); // makes it modal
        initComponents();

        workingDirectory.setText(Config.get("workingDirectory"));
        templateFile.setText(Config.get("templateFile"));
        editorCommand.setText(Config.get("editorCommand"));
        runEditor.setSelected(Boolean.parseBoolean(Config.get("runEditor")));
        compilerCommand.setText(Config.get("compilerCommand"));

        workingDirectoryChooser = new JFileChooser(); // TODO: make the chooser initially point to the directory saved in the settings
        workingDirectoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        templateFileChooser = new JFileChooser(); // TODO: same here
        templateFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        editorCommandFileChooser = new JFileChooser();
        editorCommandFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        compilerCommandFileChooser = new JFileChooser();
        compilerCommandFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editorSettingsPanel = new javax.swing.JPanel();
        editorCommandLabel = new javax.swing.JLabel();
        editorCommandBrowseButton = new javax.swing.JButton();
        editorCommand = new javax.swing.JTextField();
        runEditor = new javax.swing.JCheckBox();
        compilerSettingsPanel = new javax.swing.JPanel();
        compilerCommandLabel = new javax.swing.JLabel();
        compilerCommandBrowseButton = new javax.swing.JButton();
        compilerCommand = new javax.swing.JTextField();
        pathsAndDirectoriesPanel = new javax.swing.JPanel();
        workingDirectoryLabel = new javax.swing.JLabel();
        workingDirectory = new javax.swing.JTextField();
        workingDirectoryBrowseButton = new javax.swing.JButton();
        templateFileLabel = new javax.swing.JLabel();
        templateFile = new javax.swing.JTextField();
        templateFileBrowseButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Settings");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        editorSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Editor settings"));

        editorCommandLabel.setLabelFor(editorCommand);
        editorCommandLabel.setText("Command used to run the editor:");

        editorCommandBrowseButton.setText("Browse...");
        editorCommandBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorCommandBrowseButtonActionPerformed(evt);
            }
        });

        runEditor.setSelected(true);
        runEditor.setText("Open source files in editor after creation?");

        javax.swing.GroupLayout editorSettingsPanelLayout = new javax.swing.GroupLayout(editorSettingsPanel);
        editorSettingsPanel.setLayout(editorSettingsPanelLayout);
        editorSettingsPanelLayout.setHorizontalGroup(
            editorSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editorSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editorSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editorSettingsPanelLayout.createSequentialGroup()
                        .addComponent(editorCommandLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editorCommand, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editorCommandBrowseButton))
                    .addComponent(runEditor))
                .addContainerGap())
        );
        editorSettingsPanelLayout.setVerticalGroup(
            editorSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editorSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editorSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editorCommandLabel)
                    .addComponent(editorCommandBrowseButton)
                    .addComponent(editorCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(runEditor)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        compilerSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Compiler settings"));

        compilerCommandLabel.setLabelFor(compilerCommand);
        compilerCommandLabel.setText("Command used for compiling:");

        compilerCommandBrowseButton.setText("Browse...");
        compilerCommandBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compilerCommandBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout compilerSettingsPanelLayout = new javax.swing.GroupLayout(compilerSettingsPanel);
        compilerSettingsPanel.setLayout(compilerSettingsPanelLayout);
        compilerSettingsPanelLayout.setHorizontalGroup(
            compilerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compilerSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(compilerCommandLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(compilerCommand, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(compilerCommandBrowseButton)
                .addContainerGap())
        );
        compilerSettingsPanelLayout.setVerticalGroup(
            compilerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compilerSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(compilerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compilerCommandLabel)
                    .addComponent(compilerCommandBrowseButton)
                    .addComponent(compilerCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pathsAndDirectoriesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Paths and directories"));

        workingDirectoryLabel.setLabelFor(workingDirectory);
        workingDirectoryLabel.setText("Working directory:");

        workingDirectoryBrowseButton.setText("Browse...");
        workingDirectoryBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workingDirectoryBrowseButtonActionPerformed(evt);
            }
        });

        templateFileLabel.setLabelFor(templateFile);
        templateFileLabel.setText("Template for new source files:");

        templateFileBrowseButton.setText("Browse...");
        templateFileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateFileBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pathsAndDirectoriesPanelLayout = new javax.swing.GroupLayout(pathsAndDirectoriesPanel);
        pathsAndDirectoriesPanel.setLayout(pathsAndDirectoriesPanelLayout);
        pathsAndDirectoriesPanelLayout.setHorizontalGroup(
            pathsAndDirectoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pathsAndDirectoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pathsAndDirectoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pathsAndDirectoriesPanelLayout.createSequentialGroup()
                        .addComponent(workingDirectoryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(workingDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(workingDirectoryBrowseButton))
                    .addGroup(pathsAndDirectoriesPanelLayout.createSequentialGroup()
                        .addComponent(templateFileLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(templateFile, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(templateFileBrowseButton)))
                .addContainerGap())
        );
        pathsAndDirectoriesPanelLayout.setVerticalGroup(
            pathsAndDirectoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pathsAndDirectoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pathsAndDirectoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workingDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(workingDirectoryBrowseButton)
                    .addComponent(workingDirectoryLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pathsAndDirectoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(templateFileLabel)
                    .addGroup(pathsAndDirectoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(templateFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(templateFileBrowseButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        saveButton.setText("Save settings");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(compilerSettingsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editorSettingsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pathsAndDirectoriesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addGap(18, 18, 18)
                        .addComponent(saveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pathsAndDirectoriesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editorSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(compilerSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void workingDirectoryBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workingDirectoryBrowseButtonActionPerformed
        int returnVal = workingDirectoryChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            workingDirectory.setText(workingDirectoryChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_workingDirectoryBrowseButtonActionPerformed

    private void confirmAndClose () {
        // TODO: maybe ask for confirmation only if there is something unsaved
        // Display confirm dialog
        int confirmed = JOptionPane.showConfirmDialog(this,
                "Are you sure?",
                "Confirm close",
                JOptionPane.YES_NO_OPTION);

        // Close iff user confirmed
        if (confirmed == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        confirmAndClose();
    }//GEN-LAST:event_formWindowClosing

    private void templateFileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_templateFileBrowseButtonActionPerformed
        int returnVal = templateFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            templateFile.setText(templateFileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_templateFileBrowseButtonActionPerformed

    private void editorCommandBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorCommandBrowseButtonActionPerformed
        int returnVal = editorCommandFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            editorCommand.setText("\"" + editorCommandFileChooser.getSelectedFile().getAbsolutePath() + "\" \"%1\"");
        }
}//GEN-LAST:event_editorCommandBrowseButtonActionPerformed

    private void compilerCommandBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compilerCommandBrowseButtonActionPerformed
        int returnVal = compilerCommandFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            compilerCommand.setText("\"" + compilerCommandFileChooser.getSelectedFile().getAbsolutePath() + "\" \"%1\" -o \"%2\"");
        }
    }//GEN-LAST:event_compilerCommandBrowseButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        confirmAndClose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // We validate the input a little
        if (!editorCommand.getText().contains("%1") && !editorCommand.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "The command used to run the editor must either be empty,\n"
                    + "or contain \"%1\" (which will be substituted for the source filename).",
                    "Parameter missing", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!(compilerCommand.getText().contains("%1") && compilerCommand.getText().contains("%2"))
                && !compilerCommand.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "The command used to run the compiler must either be empty,\n"
                    + "or contain \"%1\" (which will be substituted for the source filename)\n"
                    +"and \"%2\" (which will be substituted for the output filename).",
                    "Parameter missing", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Config.set("workingDirectory", workingDirectory.getText());
        Config.set("templateFile", templateFile.getText());
        Config.set("editorCommand", editorCommand.getText());
        Config.set("runEditor", String.valueOf(runEditor.isSelected()));
        Config.set("compilerCommand", compilerCommand.getText());
        try {
            Config.save();
            JOptionPane.showMessageDialog(this, "The configuration file has been saved.");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error while saving configuration file:\n\n" + ex +
                    "\n\nThe new settings will be used until the end of the session, but haven't been saved.",
                    "Error!", JOptionPane.ERROR_MESSAGE);
        }

        this.dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField compilerCommand;
    private javax.swing.JButton compilerCommandBrowseButton;
    private javax.swing.JLabel compilerCommandLabel;
    private javax.swing.JPanel compilerSettingsPanel;
    private javax.swing.JTextField editorCommand;
    private javax.swing.JButton editorCommandBrowseButton;
    private javax.swing.JLabel editorCommandLabel;
    private javax.swing.JPanel editorSettingsPanel;
    private javax.swing.JPanel pathsAndDirectoriesPanel;
    private javax.swing.JCheckBox runEditor;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField templateFile;
    private javax.swing.JButton templateFileBrowseButton;
    private javax.swing.JLabel templateFileLabel;
    private javax.swing.JTextField workingDirectory;
    private javax.swing.JButton workingDirectoryBrowseButton;
    private javax.swing.JLabel workingDirectoryLabel;
    // End of variables declaration//GEN-END:variables

}
